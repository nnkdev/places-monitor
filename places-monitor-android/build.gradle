apply plugin: "com.android.library"
apply plugin: "jacoco"
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    srcFolders = file("./").listFiles().findAll {
        !it.isFile() && !it.name.startsWith("gradle") && !it.name.startsWith("test") && (it.name != "mobile-sdk-demoapp")
    }.collect { "./" + it.name + "/src/main/java" }

}

jacoco {
    toolVersion = rootProject.ext.jacocoVersion
}

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    flavorDimensions "target"
    productFlavors {
        phone {
            dimension "target"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

}

android.libraryVariants.all { variant ->
    tasks.withType(Javadoc) {
        source = [android.sourceSets.main.java.sourceFiles, android.sourceSets.phone.java.sourceFiles]
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        doFirst{classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)}


        exclude "**/BuildConfig.java"
        exclude "**/R.java"
        options {
            links "https://developer.android.com/reference"
        }
    }
}

task javadocInternal(type: Javadoc) {
    destinationDir = reporting.file("javadocInternal")
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

task javadocPublic(type: Javadoc) {
    destinationDir = reporting.file("javadocPublic")
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task javadocPublish(type: Jar) {
    from javadocPublic
    classifier = 'javadoc'
}

def isReleaseBuild() {
    return hasProperty('release')
}

version = isReleaseBuild() ? rootProject.moduleVersion : rootProject.moduleVersion+"-SNAPSHOT"

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
    }
}

task platformUnitTestJacocoReport(type: JacocoReport, dependsOn: "testPhoneDebugUnitTest") {
    def excludeRegex = ['**/ADB*.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes/com/adobe/marketing/mobile", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.main.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.phone.java.sourceFiles)
    executionData "$buildDir/jacoco/testPhoneDebugUnitTest.exec"

    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.adobe.marketing.mobile'
            artifactId = rootProject.moduleName
            version = version
            artifact("$buildDir/outputs/aar/${rootProject.moduleAARName}")
            artifact javadocPublish

            pom {
                name = mavenRepoName
                description = mavenRepoDescription
                url = 'https://aep-sdks.gitbook.io'
                licenses {
                    license {
                        name = 'Adobe Proprietary'
                    }
                }
                developers {
                    developer {
                        id = 'adobe'
                        name = 'adobe'
                        email = 'adobe-mobile-testing@adobe.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com//Adobe-Marketing-Cloud/acp-sdks.git'
                    developerConnection = 'scm:git:ssh://github.com//Adobe-Marketing-Cloud/acp-sdks.git'
                    url = 'https://github.com/Adobe-Marketing-Cloud/acp-sdks'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def coreDependencyNode = dependenciesNode.appendNode('dependency')
                    coreDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                    coreDependencyNode.appendNode('artifactId', 'core')
                    coreDependencyNode.appendNode('version', mavenCoreVersion)

                    def placesDependencyNode = dependenciesNode.appendNode('dependency')
                    placesDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                    placesDependencyNode.appendNode('artifactId', 'places')
                    placesDependencyNode.appendNode('version', mavenPlacesVersion)

                    def googleLocationServiceDependencyNode = dependenciesNode.appendNode('dependency')
                    googleLocationServiceDependencyNode.appendNode('groupId', 'com.google.android.gms')
                    googleLocationServiceDependencyNode.appendNode('artifactId', 'play-services-location')
                    googleLocationServiceDependencyNode.appendNode('version', mavenGoogleLocationServiceVersion)
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

ext."signing.gnupg.executable"="gpg"
ext."signing.gnupg.keyName"=System.getenv("GPG_KEY_ID")
ext."signing.gnupg.passphrase"=System.getenv("GPG_PASSPHRASE")

signing {
    useGpgCmd()
    required {
        tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.adobe.marketing.mobile:sdk-core:1.2.2'
    implementation 'com.adobe.marketing.mobile:places:1.4.0'
    implementation 'com.google.android.gms:play-services-location:16.0.0'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoCoreVersion}"
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.0'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

configurations.all {
    resolutionStrategy {
        force 'org.codehaus.groovy:groovy-all:2.4.12'
    }
}

task deleteJar(type: Delete) {
    delete 'libs/jars/logmanagementlib.jar'
}

task createJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('libs/jars/')
    include('classes.jar')
    rename('classes.jar', 'logmanagementlib.jar')
}

createJar.dependsOn(deleteJar, build)
